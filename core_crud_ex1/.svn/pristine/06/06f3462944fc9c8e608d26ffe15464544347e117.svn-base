package com.crm.cp.standard.iuser.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.crm.cp.sales.call.vo.CallVO;
import com.crm.cp.standard.auth.service.AuthService;
import com.crm.cp.standard.authIuser.service.AuthIuserService;
import com.crm.cp.standard.iuser.service.IuserService;
import com.crm.cp.standard.iuser.vo.IuserVO;
import com.crm.cp.standard.menu.service.MenuService;
import com.crm.cp.standard.menu.vo.MenuVO;
import com.crm.cp.utils.PagerVO;

@Controller
public class IuserController {

	@Resource
	IuserService iuserService;
	
	@Resource
	MenuService menuService;
	
	@Resource
	AuthIuserService authIuserService;
	
	@Resource
	AuthService authService;
	
	
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public ModelAndView UserMain(HttpSession session, @RequestParam(value = "iUserPageNum", defaultValue = "1") int iUserPageNum) {
		Map<String,Object> iuMap = new HashMap<String,Object>();
		PagerVO page = null;
		if (session.getAttribute("user") == null) {		//로그인 페이지 이동
			iuMap.put("result", "standard/home/session_expire");
		} else {
			
			iuMap.put("iUserPageNum", iUserPageNum);
			
			page = iuserService.iUserListCount(iuMap);
			iuMap.put("page", page);
			System.out.println(page.getStartRow());
			
			List<IuserVO> iUserList = iuserService.iUserAllList(iuMap);
			iuMap.put("iUserList", iUserList);
			iuMap.put("iUserListSize", iUserList.size());
		}

		List<Object> list = iuserService.iuserList(iuMap);
		List<Object> authName = iuserService.iuserAuthName();
		List<Object> TypeName = iuserService.iuserTypeName();
		List<MenuVO> menuList = menuService.selectAll(session);
		
				
		ModelAndView mov = new ModelAndView("user", "list", list);
		mov.addObject("menuList", menuList);
		mov.addObject("authName", authName);
		mov.addObject("TypeName", TypeName);
		mov.addObject("iUserPageNum", iUserPageNum);
		mov.addObject("page", page);

		return mov;
	}
	
	//전체리스트 출력 페이징/검색 
		@RequestMapping(value="/iUserPaging" , method=RequestMethod.POST)
		public @ResponseBody Map<String,Object> ActListSearch(HttpSession session, @RequestParam(value = "iUserPageNum", defaultValue = "1") int iUserPageNum,
				@RequestParam(value="u_id", defaultValue="") String u_id,
				@RequestParam(value="u_name", defaultValue="") String u_name,
				@RequestParam(value="o_name", defaultValue="") String o_name){
			Map<String,Object> iuMap = new HashMap<String,Object>();
			System.out.println("u_id"+u_id);
			if (session.getAttribute("user") == null) {		//로그인 페이지 이동
				iuMap.put("result", "standard/home/session_expire");
			} else {
				System.out.println(u_name);
				System.out.println(o_name);
				iuMap.put("u_id", u_id);
				iuMap.put("u_name", u_name);
				iuMap.put("o_name", o_name);
				iuMap.put("iUserPageNum", iUserPageNum);
				
				PagerVO page = iuserService.iUserListCount(iuMap);
				iuMap.put("page", page);
				System.out.println(page.getEndPageNum());
				System.out.println(page.getStartRow());
				
				
				List<IuserVO> iUserList = iuserService.iUserAllList(iuMap);
				iuMap.put("iUserList", iUserList);
				iuMap.put("iUserListSize", iUserList.size());
			}
			
			return iuMap;
		}
	
	
	
	
	/**
	 * 사용자권한 조회
	 * @return List<Object>
	 */
	@RequestMapping(value = "/userauth", method = RequestMethod.POST)
	public @ResponseBody List<Object> getUserAuth() {
		List<Object> authUserList = authIuserService.authUserList();
		return authUserList;
	}

	
	/**
	 * 사용자권한 검색
	 * @return List<Object>
	 */
	@RequestMapping(value = "/userAuthSearch", method = RequestMethod.POST)
	public @ResponseBody List<Object> getUserAuthSearch(HttpSession session, @RequestBody Map<String, Object> JSON){
		List<Object> authUserListSearch = authIuserService.authUserListSearch(JSON);

		return authUserListSearch;
	}
	
	//野껓옙占쎄퉳占쎈르?占쏙옙紐꾨퓠 POST
	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public ModelAndView User(HttpSession session,
			@RequestParam(value="keyfield", defaultValue="u_id") String keyfield,
			@RequestParam(value="keyword", defaultValue="") String keyword
			) {
		if (session.getAttribute("user") == null) {

			return new ModelAndView("redirect:/");
		}

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyfield", keyfield);
		map.put("keyword", keyword);
		
		List<Object> list = iuserService.iuserList(map);
		List<Object> authName = iuserService.iuserAuthName();
		ModelAndView mov = new ModelAndView("user", "list", list);
		List<MenuVO> menuList = menuService.selectAll(session);
		mov.addObject("menuList", menuList);
		mov.addObject("authName", authName);
		
		return mov;

	}
	
	//사용자등록
	@RequestMapping(value = "/insertuser", method = RequestMethod.POST)
	public @ResponseBody Map<String, String> userInsert(@RequestBody IuserVO vo, HttpSession session) {
		vo.setFst_reg_id_nm(session.getAttribute("user").toString());
		System.out.println(vo.toString());
		int resultNum = iuserService.insertUser(vo);
		authIuserService.authUserInsert(vo);
		// Object obj= iuserService.iuserOneSelectByIdNM(vo.getId_nm());
		String result = null;
		Map<String, String> map = new HashMap<String, String>();
		if(resultNum == 1){
			result = "사용자 추가에 성공하였습니다.";
		} else {
			result = "사용자 추가에 실패하였습니다.";
		}
		map.put("result", result);
		return map;
		
		
	}
	
	
	//사용자편집
	@RequestMapping(value = "/iuserEdit", method = RequestMethod.POST)
	public @ResponseBody Map<String, String> iuserEdit (@RequestBody IuserVO vo, HttpSession session) {
		vo.setFin_mdfy_id_nm(session.getAttribute("user").toString());	
		System.out.println("편집"+vo.toString());
		int rst= iuserService.iuserEdit(vo);
		Map<String, String> map = new HashMap<String, String>();
		
		if(rst == 1){
			map.put("result", "사용자 편집이 완료되었습니다.");
		} else {
			map.put("result", "사용자 편집이 실패하였습니다.");
		}
	    //Object data = iuserService.iuserOneSelectById(vo.getIuser_id());
	
		return map;
	}

	//사용자리스트에서 사용자ID 클릭했을 때 
	@RequestMapping(value = "/iuserDetail", method = RequestMethod.POST)
	public @ResponseBody Object iuserDetail(@RequestBody String userId, HttpSession session) throws IOException {
		Object user = iuserService.iuserSelectById(userId);
		return user;
		
	}
	//사용자리스트 추가 시 사용자ID 중복체크 
	@RequestMapping(value = "/iuserCheck", method = RequestMethod.POST)
	public @ResponseBody Map<String, String> iuserCheck(String userId, HttpSession session) {
		String id_nm = iuserService.iuserSelectByIdCheck(userId);
		Map<String, String> map = new HashMap<String, String>();
		map.put("id_nm", id_nm);
		return map;
	}
	//사용자리스트에서 사용자ID 클릭했을 때 
	@RequestMapping(value = "/iuserAuth", method = RequestMethod.POST)
	public @ResponseBody Object iuserAuth(@RequestBody String userId, HttpSession session) throws IOException {
		Object user = iuserService.iuserSelectByIdAuthDetail(userId);
		return user;
		
	}

	//사용자리스트에서 사용자ID 클릭했을 때 
	@RequestMapping(value = "/iuserAuthDetail", method = RequestMethod.POST)
	public @ResponseBody Object iuserAuthDetail(@RequestBody String userId, HttpSession session) throws IOException {
		Object user = iuserService.iuserOneSelectById(userId);
		
		
		return user;
		
	}


	@RequestMapping(value = "/iuserDelete", method = RequestMethod.POST)
	public String bankDelete(String[] del_code) throws IOException {
		for (String iuser_id : del_code) {
			iuserService.removeIuser(iuser_id);
		}
		return "redirect:/user";
	}
	
	//사용자 상세부분에서 구분 검색 팝업 GET
	@RequestMapping(value = "/userTypePopup", method = RequestMethod.GET)
	public ModelAndView userTypePopup(String[] del_code, HttpSession session,
			@RequestParam(value="keyfield", defaultValue="c_name") String keyfield,
			@RequestParam(value="keyword", defaultValue="") String keyword) throws IOException {
		
		if (session.getAttribute("user") == null) {

			return new ModelAndView("redirect:/");
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyfield", keyfield);
		map.put("keyword", keyword);

		List<Object> codeList = iuserService.codeList(map);		
		ModelAndView mov = new ModelAndView("/standard/iuser/userTypePopup","codeList",codeList);
		
		return mov;
	}
	
	//사용자 상세부분에서 구분 검색 팝업 POST 검색
	@RequestMapping(value = "/userTypePopup", method = RequestMethod.POST)
	public ModelAndView userTypePopupSearch(String[] del_code, HttpSession session,
			@RequestParam(value="keyfield", defaultValue="c_name") String keyfield,
			@RequestParam(value="keyword", defaultValue="") String keyword) throws IOException {
		
		if (session.getAttribute("user") == null) {

			return new ModelAndView("redirect:/");
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyfield", keyfield);
		map.put("keyword", keyword);
		
		List<Object> codeList = iuserService.codeList(map);
		ModelAndView mov = new ModelAndView("/standard/iuser/userTypePopup","codeList",codeList);
		
		return mov;
	}

	//사용자 상세부분에서 조직 검색 팝업 GET
	@RequestMapping(value = "/orgNamePopup", method = RequestMethod.GET)
	public ModelAndView orgNamePopup(String[] del_code, HttpSession session,
			@RequestParam(value="keyfield", defaultValue="o_name") String keyfield,
			@RequestParam(value="keyword", defaultValue="") String keyword) throws IOException {
		
		if (session.getAttribute("user") == null) {

			return new ModelAndView("redirect:/");
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyfield", keyfield);
		map.put("keyword", keyword);

		List<Object> orgList = iuserService.orgList(map);
		ModelAndView mov = new ModelAndView("/standard/iuser/orgNamePopup","orgList",orgList);
		
		return mov;
	}
	
	//사용자 상세부분에서 구분 검색 팝업 POST 검색
	@RequestMapping(value = "/orgNamePopup", method = RequestMethod.POST)
	public ModelAndView orgNamePopupSearch(HttpSession session, 
			@RequestParam(value="keyfield", defaultValue="o_name") String keyfield,
			@RequestParam(value="keyword", defaultValue="") String keyword) throws IOException {
		
		if (session.getAttribute("user") == null) {

			return new ModelAndView("redirect:/");
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyfield", keyfield);
		map.put("keyword", keyword);

		List<Object> orgList = iuserService.orgList(map);
		ModelAndView mov = new ModelAndView("/standard/iuser/orgNamePopup","orgList",orgList);		
		
		return mov;
	}
}
